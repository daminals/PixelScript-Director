# This workflow will build and push a new container image to Amazon Lambda,

name: Deploy to Amazon Lambda

on:
  push:
    branches: [ "master" ]

env:
  ECR_REPOSITORY: 318710067667.dkr.ecr.us-east-1.amazonaws.com/moviepy:latest           # set this to your Amazon ECR repository name
  CONTAINER_NAME: moviepy           # set this to the name of the container in the

permissions:
  contents: read

jobs:
  combine_video_lambda:
    name: Deploy Combine Video Lambda
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        lambda_name: [combine_video]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.6'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Configure ffmpeg
      uses: Iamshankhadeep/setup-ffmpeg@v1.2
      with:
        version: "4.4"
      id: setup-ffmpeg

    - name: Copy FFmpeg to Bin
      run: |
        cd ${{ matrix.lambda_name }}
        mkdir bin
        cd bin
        cp ${{ steps.setup-ffmpeg.outputs.ffmpeg-path }} ./ffmpeg
        cd ..

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: 'true'

    - name: Install dependencies
      run: |
        # curl -LO http://archive.ubuntu.com/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
        # dpkg -i libffi6_3.2.1-8_amd64.deb
        wget https://mirrors.kernel.org/ubuntu/pool/main/libf/libffi/libffi6_3.2.1-8_amd64.deb
        apt install ./libffi6_3.2.1-8_amd64.deb
        apt install libffi-dev

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      run: |
        # Build a docker container and
        # push it to ECR so that it can be deployed to lambda
        cd ${{ matrix.lambda_name }}
        docker build --platform linux/amd64 -t $CONTAINER_NAME .
        docker tag $CONTAINER_NAME:latest $ECR_REPOSITORY
        docker push $ECR_REPOSITORY

    - name: Deploy Combine Video Lambda
      id: deploy-to-aws
      run: |
        cd ${{ matrix.lambda_name }}
        aws lambda update-function-code --function-name ${{ matrix.lambda_name }} --image-uri $ECR_REPOSITORY > /dev/null 2>&1
      
  push_lambda_to_aws:
    name: Deploy to AWS Lambda
    runs-on: ubuntu-latest
    environment: production
    strategy:
      matrix:
        lambda_name: [combine_audio, process_video, process_audio, scriptGen, generate_video]

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11.6'

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Prepare Package
      run: |
        cd ${{ matrix.lambda_name }}
        pip3 install -r requirements.txt --target ./package

    - name: Zip
      run: |
        cd ${{ matrix.lambda_name }}
        cd package                                      
        zip -r ../my_deployment_package.zip .
        cd ..                                           
        zip my_deployment_package.zip lambda_function.py

    - name: Push to AWS
      run: |
        cd ${{ matrix.lambda_name }}
        aws lambda update-function-code --function-name ${{ matrix.lambda_name }} --zip-file fileb://my_deployment_package.zip  > /dev/null 2>&1
